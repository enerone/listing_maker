#!/usr/bin/env python3
"""
Test script para el Marketing Review Agent
Prueba el agente con datos de ejemplo para verificar su funcionamiento.
"""

import asyncio
import json
import sys
import os

# Agregar el directorio ra√≠z al path para imports
sys.path.insert(0, os.path.join(os.path.dirname(__file__)))

from app.agents.marketing_review_agent import MarketingReviewAgent
from app.services.ollama_service import get_ollama_service

async def test_marketing_review_agent():
    """
    Prueba el Marketing Review Agent con datos de ejemplo.
    """
    print("üöÄ Iniciando prueba del Marketing Review Agent...")
    
    # Verificar que el servicio Ollama est√© disponible
    try:
        ollama_service = get_ollama_service()
        print("‚úÖ Servicio Ollama disponible")
    except Exception as e:
        print(f"‚ùå Error conectando con Ollama: {e}")
        return
    
    # Crear instancia del agente
    agent = MarketingReviewAgent()
    print(f"‚úÖ Agente {agent.agent_name} creado exitosamente")
    
    # Datos de prueba
    test_data = {
        "product_data": {
            "product_name": "Smartwatch Deportivo Pro X1",
            "category": "ELECTRONICS",
            "features": [
                "GPS integrado",
                "Monitor de frecuencia card√≠aca",
                "Resistente al agua IP68",
                "Bater√≠a de 7 d√≠as",
                "Pantalla AMOLED"
            ]
        },
        "previous_results": {
            "ProductDescriptionAgent": {
                "titulo": "Smartwatch Deportivo Pro X1 - Bater√≠a de ultra duraci√≥n de 7 d√≠as con GPS activo - Resistencia militar MIL-STD-810G para condiciones extremas - Negro 42mm",
                "descripcion": """Descubre el smartwatch que revolucionar√° tu estilo de vida activo. El Pro X1 combina tecnolog√≠a avanzada con dise√±o robusto para acompa√±arte en cada aventura.

Con su bater√≠a de ultra duraci√≥n de 7 d√≠as, nunca m√°s te preocupar√°s por quedarte sin energ√≠a durante tus entrenamientos m√°s largos. Su GPS de precisi√≥n militar te mantendr√° siempre en el camino correcto, mientras que el monitor card√≠aco profesional cuida de tu salud 24/7.

La resistencia IP68 y certificaci√≥n MIL-STD-810G garantizan que resista agua, polvo y condiciones extremas. Su pantalla AMOLED de alta definici√≥n te brinda informaci√≥n clara incluso bajo el sol intenso.

Ideal para atletas, aventureros y profesionales que buscan rendimiento sin compromisos. Incluye m√°s de 100 modos deportivos, an√°lisis avanzado del sue√±o y notificaciones inteligentes.

Tu compa√±ero perfecto para superar l√≠mites y alcanzar nuevas metas.""",
                "bullet_points": [
                    "‚ö° Bater√≠a ultra duraci√≥n: 7 d√≠as de uso continuo con GPS activo",
                    "üéØ GPS militar de precisi√≥n para navegaci√≥n exacta en cualquier terreno",
                    "‚ù§Ô∏è Monitor card√≠aco profesional con alertas de salud en tiempo real",
                    "üõ°Ô∏è Resistencia extrema: IP68 + MIL-STD-810G para condiciones adversas",
                    "üì± Pantalla AMOLED HD con 100+ modos deportivos y an√°lisis completo"
                ],
                "keywords": [
                    "smartwatch deportivo",
                    "GPS precision",
                    "bater√≠a larga duraci√≥n",
                    "resistente agua",
                    "monitor card√≠aco",
                    "fitness tracker",
                    "reloj inteligente",
                    "deportes extremos"
                ],
                "target_price": 299.99
            }
        }
    }
    
    print("\nüìã Datos de prueba preparados:")
    print(f"   Producto: {test_data['product_data']['product_name']}")
    print(f"   Caracter√≠sticas: {len(test_data['product_data']['features'])} features")
    print(f"   T√≠tulo actual: {test_data['previous_results']['ProductDescriptionAgent']['titulo'][:60]}...")
    print(f"   Precio objetivo: ${test_data['previous_results']['ProductDescriptionAgent']['target_price']}")
    
    # Ejecutar an√°lisis
    print("\nüîÑ Ejecutando an√°lisis de marketing digital...")
    try:
        result = await agent.process(test_data)
        
        if result["success"]:
            print("‚úÖ An√°lisis completado exitosamente!")
            
            # Mostrar resultados principales
            data = result["data"]
            print(f"\nüìä RESULTADOS DEL AN√ÅLISIS:")
            print(f"   Puntuaci√≥n general: {data.get('puntuacion_general', 'N/A')}/10")
            print(f"   Nivel de confianza: {data.get('confidence_score', 0)*100:.1f}%")
            
            # An√°lisis por categor√≠as
            analisis = data.get("analisis_marketing", {})
            print(f"\nüîç PUNTUACIONES POR CATEGOR√çA:")
            for categoria, datos in analisis.items():
                if isinstance(datos, dict) and 'puntuacion' in datos:
                    print(f"   {categoria.replace('_', ' ').title()}: {datos['puntuacion']}/10")
            
            # Mejoras principales
            mejoras = data.get("mejoras_recomendadas", {})
            print(f"\nüí° MEJORAS PRINCIPALES:")
            
            if 'titulo_optimizado' in mejoras and mejoras['titulo_optimizado'].get('nuevo_titulo'):
                print(f"   üìù T√≠tulo optimizado:")
                print(f"      {mejoras['titulo_optimizado']['nuevo_titulo'][:80]}...")
            
            if 'prioridades_implementacion' in data and data['prioridades_implementacion']:
                print(f"   üéØ Prioridades:")
                for i, prioridad in enumerate(data['prioridades_implementacion'][:3], 1):
                    print(f"      {i}. {prioridad}")
            
            # Guardar resultado completo
            with open('marketing_review_test_result.json', 'w', encoding='utf-8') as f:
                json.dump(result, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Resultado completo guardado en: marketing_review_test_result.json")
            
        else:
            print(f"‚ùå Error en el an√°lisis: {result.get('error', 'Error desconocido')}")
            
    except Exception as e:
        print(f"‚ùå Error ejecutando el agente: {e}")
        import traceback
        traceback.print_exc()

def main():
    """
    Funci√≥n principal del script de prueba.
    """
    print("=" * 60)
    print("üß™ TEST - Marketing Review Agent")
    print("=" * 60)
    
    # Ejecutar prueba
    asyncio.run(test_marketing_review_agent())
    
    print("\n" + "=" * 60)
    print("‚úÖ Prueba completada")
    print("=" * 60)

if __name__ == "__main__":
    main()
