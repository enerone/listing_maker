#!/usr/bin/env python3
"""
Script de prueba para verificar la generaci√≥n de descripci√≥n larga
"""

import asyncio
import sys
import os
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from app.models import ProductInput, ProductCategory
from app.agents.listing_orchestrator import ListingOrchestrator

async def test_long_description():
    """Prueba la generaci√≥n de descripci√≥n larga"""
    
    # Crear producto de prueba
    product_input = ProductInput(
        product_name="Auriculares Bluetooth Premium XR-500",
        category=ProductCategory.ELECTRONICS,
        target_customer_description="Profesionales que trabajan desde casa y necesitan audio de calidad",
        use_situations=[
            "Reuniones de trabajo virtuales",
            "Escuchar m√∫sica mientras trabajan",
            "Llamadas importantes",
            "Ejercicio en casa"
        ],
        value_proposition="Auriculares con cancelaci√≥n de ruido activa y 30 horas de bater√≠a",
        competitive_advantages=[
            "Cancelaci√≥n de ruido l√≠der en el mercado",
            "Bater√≠a de larga duraci√≥n (30 horas)",
            "Conexi√≥n Bluetooth 5.2 estable",
            "Dise√±o ergon√≥mico para uso prolongado"
        ],
        raw_specifications="""
        Conectividad: Bluetooth 5.2
        Bater√≠a: 30 horas con ANC activado
        Cancelaci√≥n de ruido: H√≠brida activa
        Respuesta de frecuencia: 20Hz-20kHz
        Peso: 280g
        Carga r√°pida: 5 min = 2 horas de uso
        """,
        box_content_description="Auriculares XR-500, cable USB-C, cable de audio 3.5mm, estuche de transporte, manual de usuario",
        warranty_info="2 a√±os de garant√≠a internacional",
        target_price=199.99,
        pricing_strategy_notes="Posicionamiento premium competitivo",
        target_keywords=[
            "auriculares bluetooth",
            "cancelaci√≥n ruido",
            "bater√≠a larga duraci√≥n",
            "trabajo remoto"
        ]
    )
    
    print("üöÄ Iniciando prueba de generaci√≥n de descripci√≥n larga...")
    print(f"üì¶ Producto: {product_input.product_name}")
    
    # Crear orquestador
    orchestrator = ListingOrchestrator()
    
    try:
        # Generar listing completo
        listing = await orchestrator.create_listing(product_input)
        
        print("\n" + "="*80)
        print("üìã LISTING GENERADO")
        print("="*80)
        
        print(f"\nüè∑Ô∏è  T√çTULO:")
        print(listing.title)
        
        print(f"\nüìù DESCRIPCI√ìN LARGA:")
        print("-" * 50)
        print(listing.description)
        print("-" * 50)
        
        print(f"\nüìä ESTAD√çSTICAS:")
        print(f"   ‚Ä¢ Longitud descripci√≥n: {len(listing.description)} caracteres")
        print(f"   ‚Ä¢ Palabras: {len(listing.description.split())} palabras")
        print(f"   ‚Ä¢ Confianza: {listing.confidence_score:.2f}")
        
        print(f"\nüéØ BULLET POINTS:")
        for i, bullet in enumerate(listing.bullet_points, 1):
            print(f"   {i}. {bullet}")
        
        # Verificar si la descripci√≥n es larga y detallada
        if len(listing.description) > 500:
            print("\n‚úÖ √âXITO: Descripci√≥n larga generada correctamente")
        else:
            print("\n‚ö†Ô∏è  ADVERTENCIA: Descripci√≥n parece corta")
        
        # Obtener respuestas de agentes para an√°lisis
        agent_responses = await orchestrator.get_last_agent_responses()
        
        if "product_description" in agent_responses:
            desc_response = agent_responses["product_description"]
            print(f"\nü§ñ AGENTE DE DESCRIPCI√ìN:")
            print(f"   ‚Ä¢ Estado: {desc_response.status}")
            print(f"   ‚Ä¢ Confianza: {desc_response.confidence:.2f}")
            print(f"   ‚Ä¢ Tiempo: {desc_response.processing_time:.2f}s")
            
            if desc_response.status == "success":
                desc_data = desc_response.data
                
                if desc_data.get("full_description"):
                    print(f"   ‚Ä¢ Descripci√≥n completa: {len(desc_data['full_description'])} caracteres")
                
                if desc_data.get("main_description"):
                    main_desc = desc_data["main_description"]
                    print(f"   ‚Ä¢ Secciones generadas:")
                    for key, value in main_desc.items():
                        if value and isinstance(value, str):
                            print(f"     - {key}: {len(value)} caracteres")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {str(e)}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = asyncio.run(test_long_description())
    sys.exit(0 if success else 1)
