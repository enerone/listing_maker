from typing import Dict, Any
import logging
import time
from .base_agent import BaseAgent
from ..models import ProductInput, AgentResponse

logger = logging.getLogger(__name__)

class SEOVisualAgent(BaseAgent):
    """
    Agente especializado en optimizaci√≥n SEO y gesti√≥n de activos visuales.
    
    Responsabilidades:
    - Optimizar keywords para b√∫squeda en Amazon
    - Desarrollar estrategia de t√©rminos de b√∫squeda
    - Analizar y organizar activos visuales disponibles
    - Generar recomendaciones para im√°genes y contenido visual
    """
    
    def __init__(self, temperature: float = 0.4):
        super().__init__(
            agent_name="SEO & Visual Agent",
            temperature=temperature
        )
    
    def get_system_prompt(self) -> str:
        """
        Prompt del sistema para el agente de SEO y visual
        """
        return """Eres un experto en SEO para Amazon y optimizaci√≥n de contenido visual. 
Tu trabajo es maximizar la visibilidad del producto en b√∫squedas y optimizar la presentaci√≥n visual.
Entiendes el algoritmo A9 de Amazon y las mejores pr√°cticas de conversi√≥n visual.
Siempre devuelves respuestas en formato JSON v√°lido.
Eres estrat√©gico, orientado a resultados y entiendes el comportamiento del comprador online.
IMPORTANTE: Todas las recomendaciones deben estar completamente en espa√±ol, con un lenguaje claro y espec√≠fico para el mercado hispanohablante."""
    
    async def process(self, product_input: ProductInput) -> AgentResponse:
        """
        Optimiza SEO y analiza activos visuales para el producto
        """
        start_time = time.time()
        
        try:
            logger.info(f"Iniciando an√°lisis SEO y visual para: {product_input.product_name}")
            
            # Preparar prompt especializado para SEO y visual
            prompt = self._build_seo_visual_prompt(product_input)
            
            # Generar respuesta con Ollama
            ollama_response = await self._generate_response(prompt, structured=True)
            
            # Extraer datos parseados
            if ollama_response.get("success") and ollama_response.get("is_structured"):
                parsed_response = ollama_response["parsed_data"]
            else:
                logger.error(f"Error en respuesta de Ollama: {ollama_response.get('error', 'Respuesta no estructurada')}")
                raise Exception(f"Error generando respuesta SEO: {ollama_response.get('error', 'Respuesta no v√°lida')}")
            
            processing_time = time.time() - start_time
            
            # Crear respuesta del agente
            response = AgentResponse(
                agent_name=self.agent_name,
                status="success",
                data=parsed_response,
                confidence=self._calculate_seo_confidence(parsed_response),
                processing_time=processing_time,
                notes=[
                    "Keywords principales identificadas",
                    "Estrategia SEO para Amazon desarrollada",
                    "Activos visuales analizados",
                    "Recomendaciones de contenido visual generadas"
                ],
                recommendations=parsed_response.get("recommendations", [])
            )
            
            logger.info(f"An√°lisis SEO y visual completado con confianza: {response.confidence}")
            return response
            
        except Exception as e:
            logger.error(f"Error en an√°lisis SEO y visual: {str(e)}")
            processing_time = time.time() - start_time
            return AgentResponse(
                agent_name=self.agent_name,
                status="error",
                data={},
                confidence=0.0,
                processing_time=processing_time,
                notes=[f"Error: {str(e)}"]
            )
    
    def _build_seo_visual_prompt(self, product_input: ProductInput) -> str:
        """
        Construye el prompt especializado para SEO y visual
        """
        return f"""
Tu rol es el de un Agente de Extracci√≥n y Optimizaci√≥n de Keywords especializado en listings para Amazon. Realizar√°s dos tareas fundamentales:

FASE 1 - EXTRACCI√ìN INICIAL DE KEYWORDS:

INFORMACI√ìN DEL PRODUCTO:
- T√≠tulo: {product_input.product_name}
- Descripci√≥n: {product_input.value_proposition}
- Categor√≠a: {product_input.category}
- Marca: {getattr(product_input, 'brand', 'No especificada')}
- Keywords iniciales: {', '.join(product_input.target_keywords) if product_input.target_keywords else 'No especificadas'}
- Cliente objetivo: {product_input.target_customer_description}
- Situaciones de uso: {', '.join(product_input.use_situations)}
- Ventajas competitivas: {', '.join(product_input.competitive_advantages)}

INSTRUCCIONES ESPEC√çFICAS:
1. Analiza cuidadosamente el t√≠tulo y descripci√≥n del producto
2. Extrae las keywords m√°s relevantes que describan claramente el producto
3. Prioriza keywords con mayor volumen de b√∫squeda y pertinencia al producto en Amazon
4. Considera el comportamiento de b√∫squeda de usuarios hispanohablantes en Amazon
5. Incluye variaciones sem√°nticas y sin√≥nimos relevantes
6. Considera t√©rminos de b√∫squeda por beneficios, caracter√≠sticas y casos de uso
7. Incluye keywords de cola larga espec√≠ficas para menor competencia

FASE 2 - OPTIMIZACI√ìN ESTRAT√âGICA:
Genera una estrategia completa de keywords optimizada considerando:
- Relevancia al producto y categor√≠a
- Volumen de b√∫squeda estimado en Amazon
- Intenci√≥n del usuario (informacional, transaccional, navegacional)
- Competitividad en Amazon
- Estacionalidad y tendencias
- Keywords de marca y gen√©ricas
- T√©rminos espec√≠ficos de la categor√≠a

FORMATO DE RESPUESTA (JSON):
{{
    "seo_strategy": {{
        "primary_keywords": ["3-5 keywords principales de alto volumen y relevancia m√°xima"],
        "secondary_keywords": ["5-8 keywords secundarias complementarias"],
        "long_tail_keywords": ["5-7 keywords de cola larga espec√≠ficas y menos competitivas"],
        "branded_keywords": ["Keywords de marca si aplican"],
        "competitor_keywords": ["Keywords que usan competidores principales"],
        "benefit_keywords": ["Keywords basadas en beneficios del producto"],
        "feature_keywords": ["Keywords basadas en caracter√≠sticas t√©cnicas"],
        "use_case_keywords": ["Keywords basadas en situaciones de uso"]
    }},
    "search_terms_optimization": {{
        "frontend_terms": ["T√©rminos optimizados para t√≠tulo, bullets y descripci√≥n"],
        "backend_terms": ["T√©rminos para campos de b√∫squeda backend de Amazon"],
        "seasonal_terms": ["T√©rminos estacionales relevantes"],
        "category_specific_terms": ["T√©rminos espec√≠ficos de la categor√≠a del producto"],
        "audience_terms": ["T√©rminos espec√≠ficos del p√∫blico objetivo"],
        "problem_solving_terms": ["Keywords que resuelven problemas del cliente"]
    }},
    "keyword_analysis": {{
        "volume_score": "Puntuaci√≥n estimada de volumen de b√∫squeda (1-10)",
        "competition_level": "Nivel de competencia estimado (bajo/medio/alto)",
        "relevance_score": "Puntuaci√≥n de relevancia al producto (1-10)",
        "conversion_potential": "Potencial de conversi√≥n estimado (bajo/medio/alto)",
        "priority_ranking": ["Lista ordenada de keywords por prioridad de implementaci√≥n"]
    }},
    "implementation_strategy": {{
        "title_keywords": ["Keywords prioritarias para incluir en el t√≠tulo"],
        "bullet_keywords": ["Keywords para distribuir en bullet points"],
        "description_keywords": ["Keywords para descripci√≥n principal"],
        "backend_keywords": ["Keywords para campos ocultos de Amazon"],
        "ppc_keywords": ["Keywords recomendadas para campa√±as PPC"]
    }},
    "visual_assets_analysis": {{
        "available_assets": {product_input.available_assets if product_input.available_assets else ["No especificados"]},
        "asset_quality_assessment": "Evaluaci√≥n de calidad de los assets existentes",
        "missing_visual_content": ["Contenido visual faltante cr√≠tico basado en keywords"],
        "visual_hierarchy_recommendation": "Recomendaci√≥n de jerarqu√≠a visual basada en keywords principales"
    }},
    "image_strategy": {{
        "main_image_recommendations": "Recomendaciones para imagen principal optimizada para keywords",
        "secondary_images_plan": [
            {{
                "slot": "Imagen 2",
                "purpose": "Mostrar caracter√≠sticas clave basadas en keywords",
                "content_type": "Tipo de contenido que refuerce keywords principales"
            }},
            {{
                "slot": "Imagen 3", 
                "purpose": "Demostrar beneficios basados en keywords de beneficios",
                "content_type": "Contenido que conecte con t√©rminos de b√∫squeda emocionales"
            }}
        ],
        "lifestyle_photography": "Estrategia de fotograf√≠a lifestyle que refuerce keywords de uso",
        "infographic_needs": ["Necesidades de infograf√≠as basadas en keywords t√©cnicas"]
    }},
    "a_plus_content_strategy": {{
        "content_modules": ["M√≥dulos de contenido A+ optimizados para keywords"],
        "visual_storytelling": "Estrategia de storytelling visual que incorpore keywords naturalmente",
        "comparison_charts": "Recomendaciones para charts comparativos con keywords competitivas",
        "lifestyle_integration": "Integraci√≥n de im√°genes lifestyle con keywords de uso"
    }},
    "seo_bullets": [
        "üîç Bullet optimizado con keywords principales: [ejemplo espec√≠fico]",
        "üìä Bullet con t√©rminos de b√∫squeda espec√≠ficos: [ejemplo espec√≠fico]", 
        "üéØ Bullet con keywords de cola larga: [ejemplo espec√≠fico]",
        "‚≠ê Bullet con t√©rminos de beneficio clave: [ejemplo espec√≠fico]",
        "üèÜ Bullet con diferenciadores SEO: [ejemplo espec√≠fico]"
    ],
    "optimization_timeline": {{
        "immediate_actions": ["Optimizar t√≠tulo y descripci√≥n con keywords principales", "Implementar keywords en bullets"],
        "30_day_optimizations": ["An√°lisis de rendimiento de keywords", "Optimizaci√≥n basada en datos"],
        "long_term_strategy": ["Expansi√≥n de keywords basada en estacionalidad", "Optimizaci√≥n competitiva continua"]
    }},
    "performance_tracking": {{
        "keywords_to_monitor": ["Keywords principales para trackear ranking"],
        "ranking_targets": "Objetivos de posicionamiento para keywords prioritarias",
        "conversion_metrics": ["CTR por keyword", "Conversi√≥n por t√©rmino de b√∫squeda", "Posici√≥n org√°nica promedio"]
    }},
    "recommendations": [
        "Recomendaciones espec√≠ficas de implementaci√≥n de keywords",
        "Sugerencias para tests A/B de t√≠tulos con diferentes keywords",
        "Estrategias para mejorar ranking org√°nico",
        "Pr√≥ximos pasos para optimizaci√≥n continua"
    ]
}

CRITERIOS DE CALIDAD:
- Todas las keywords deben ser espec√≠ficamente relevantes para el mercado hispanohablante
- Prioriza t√©rminos que los clientes realmente buscan en Amazon M√©xico/Espa√±a
- Incluye variaciones gramaticales y errores de escritura comunes
- Considera diferencias regionales en terminolog√≠a
- Equilibra keywords de alta y baja competencia
- Asegura que las keywords sean naturales y no afecten la legibilidad

IMPORTANTE: Organiza todas las keywords por orden de importancia y relevancia para facilitar su uso posterior en t√≠tulos, descripciones y campa√±as publicitarias.
"""
    
    def _calculate_seo_confidence(self, data: Dict[str, Any]) -> float:
        """
        Calcula la confianza del an√°lisis SEO y visual
        """
        confidence = 0.0
        
        # Verificar estrategia SEO
        seo = data.get("seo_strategy", {})
        if seo.get("primary_keywords") and len(seo.get("primary_keywords", [])) >= 3:
            confidence += 0.2
        if seo.get("secondary_keywords") and len(seo.get("secondary_keywords", [])) >= 5:
            confidence += 0.15
        if seo.get("long_tail_keywords") and len(seo.get("long_tail_keywords", [])) >= 3:
            confidence += 0.1
        
        # Verificar optimizaci√≥n de t√©rminos de b√∫squeda
        search_terms = data.get("search_terms_optimization", {})
        if search_terms.get("frontend_terms") and len(search_terms.get("frontend_terms", [])) >= 5:
            confidence += 0.15
        if search_terms.get("backend_terms") and len(search_terms.get("backend_terms", [])) >= 10:
            confidence += 0.1
        
        # Verificar estrategia de im√°genes
        image_strategy = data.get("image_strategy", {})
        if image_strategy.get("main_image_recommendations"):
            confidence += 0.1
        if image_strategy.get("secondary_images_plan") and len(image_strategy.get("secondary_images_plan", [])) >= 3:
            confidence += 0.1
        
        # Verificar contenido A+
        aplus = data.get("a_plus_content_strategy", {})
        if aplus.get("content_modules") and len(aplus.get("content_modules", [])) >= 2:
            confidence += 0.05
        
        # Verificar timeline de optimizaci√≥n
        timeline = data.get("optimization_timeline", {})
        if timeline.get("immediate_actions") and len(timeline.get("immediate_actions", [])) >= 2:
            confidence += 0.05
        
        return min(confidence, 1.0)
- Competitividad en Amazon
- Estacionalidad y tendencias
- Keywords de marca y gen√©ricas
- T√©rminos espec√≠ficos de la categor√≠a

FORMATO DE RESPUESTA (JSON):
{{
    "seo_strategy": {{
        "primary_keywords": ["3-5 keywords principales de alto volumen y relevancia m√°xima"],
        "secondary_keywords": ["5-8 keywords secundarias complementarias"],
        "long_tail_keywords": ["5-7 keywords de cola larga espec√≠ficas y menos competitivas"],
        "branded_keywords": ["Keywords de marca si aplican"],
        "competitor_keywords": ["Keywords que usan competidores principales"],
        "benefit_keywords": ["Keywords basadas en beneficios del producto"],
        "feature_keywords": ["Keywords basadas en caracter√≠sticas t√©cnicas"],
        "use_case_keywords": ["Keywords basadas en situaciones de uso"]
    }},
    "search_terms_optimization": {{
        "frontend_terms": ["T√©rminos optimizados para t√≠tulo, bullets y descripci√≥n"],
        "backend_terms": ["T√©rminos para campos de b√∫squeda backend de Amazon"],
        "seasonal_terms": ["T√©rminos estacionales relevantes"],
        "category_specific_terms": ["T√©rminos espec√≠ficos de la categor√≠a del producto"],
        "audience_terms": ["T√©rminos espec√≠ficos del p√∫blico objetivo"],
        "problem_solving_terms": ["Keywords que resuelven problemas del cliente"]
    }},
    "keyword_analysis": {{
        "volume_score": "Puntuaci√≥n estimada de volumen de b√∫squeda (1-10)",
        "competition_level": "Nivel de competencia estimado (bajo/medio/alto)",
        "relevance_score": "Puntuaci√≥n de relevancia al producto (1-10)",
        "conversion_potential": "Potencial de conversi√≥n estimado (bajo/medio/alto)",
        "priority_ranking": ["Lista ordenada de keywords por prioridad de implementaci√≥n"]
    }},
    "implementation_strategy": {{
        "title_keywords": ["Keywords prioritarias para incluir en el t√≠tulo"],
        "bullet_keywords": ["Keywords para distribuir en bullet points"],
        "description_keywords": ["Keywords para descripci√≥n principal"],
        "backend_keywords": ["Keywords para campos ocultos de Amazon"],
        "ppc_keywords": ["Keywords recomendadas para campa√±as PPC"]
    }},
    "visual_assets_analysis": {{
        "available_assets": {product_input.available_assets if product_input.available_assets else ["No especificados"]},
        "asset_quality_assessment": "Evaluaci√≥n de calidad de los assets existentes",
        "missing_visual_content": ["Contenido visual faltante cr√≠tico basado en keywords"],
        "visual_hierarchy_recommendation": "Recomendaci√≥n de jerarqu√≠a visual basada en keywords principales"
    }},
    "image_strategy": {{
        "main_image_recommendations": "Recomendaciones para imagen principal optimizada para keywords",
        "secondary_images_plan": [
            {{
                "slot": "Imagen 2",
                "purpose": "Mostrar caracter√≠sticas clave basadas en keywords",
                "content_type": "Tipo de contenido que refuerce keywords principales"
            }},
            {{
                "slot": "Imagen 3", 
                "purpose": "Demostrar beneficios basados en keywords de beneficios",
                "content_type": "Contenido que conecte con t√©rminos de b√∫squeda emocionales"
            }}
        ],
        "lifestyle_photography": "Estrategia de fotograf√≠a lifestyle que refuerce keywords de uso",
        "infographic_needs": ["Necesidades de infograf√≠as basadas en keywords t√©cnicas"]
    }},
    "a_plus_content_strategy": {{
        "content_modules": ["M√≥dulos de contenido A+ optimizados para keywords"],
        "visual_storytelling": "Estrategia de storytelling visual que incorpore keywords naturalmente",
        "comparison_charts": "Recomendaciones para charts comparativos con keywords competitivas",
        "lifestyle_integration": "Integraci√≥n de im√°genes lifestyle con keywords de uso"
    }},
    "seo_bullets": [
        "üîç Bullet optimizado con keywords principales: [ejemplo espec√≠fico]",
        "üìä Bullet con t√©rminos de b√∫squeda espec√≠ficos: [ejemplo espec√≠fico]", 
        "üéØ Bullet con keywords de cola larga: [ejemplo espec√≠fico]",
        "‚≠ê Bullet con t√©rminos de beneficio clave: [ejemplo espec√≠fico]",
        "üèÜ Bullet con diferenciadores SEO: [ejemplo espec√≠fico]"
    ],
    "optimization_timeline": {{
        "immediate_actions": ["Optimizar t√≠tulo y descripci√≥n con keywords principales", "Implementar keywords en bullets"],
        "30_day_optimizations": ["An√°lisis de rendimiento de keywords", "Optimizaci√≥n basada en datos"],
        "long_term_strategy": ["Expansi√≥n de keywords basada en estacionalidad", "Optimizaci√≥n competitiva continua"]
    }},
    "performance_tracking": {{
        "keywords_to_monitor": ["Keywords principales para trackear ranking"],
        "ranking_targets": "Objetivos de posicionamiento para keywords prioritarias",
        "conversion_metrics": ["CTR por keyword", "Conversi√≥n por t√©rmino de b√∫squeda", "Posici√≥n org√°nica promedio"]
    }},
    "recommendations": [
        "Recomendaciones espec√≠ficas de implementaci√≥n de keywords",
        "Sugerencias para tests A/B de t√≠tulos con diferentes keywords",
        "Estrategias para mejorar ranking org√°nico",
        "Pr√≥ximos pasos para optimizaci√≥n continua"
    ]
}}

CRITERIOS DE CALIDAD:
- Todas las keywords deben ser espec√≠ficamente relevantes para el mercado hispanohablante
- Prioriza t√©rminos que los clientes realmente buscan en Amazon M√©xico/Espa√±a
- Incluye variaciones gramaticales y errores de escritura comunes
- Considera diferencias regionales en terminolog√≠a
- Equilibra keywords de alta y baja competencia
- Asegura que las keywords sean naturales y no afecten la legibilidad
- M√°ximo 30 keywords en total, organizadas por importancia y relevancia

IMPORTANTE: Organiza todas las keywords por orden de importancia y relevancia para facilitar su uso posterior en t√≠tulos, descripciones y campa√±as publicitarias.
"""
    
    def _calculate_seo_confidence(self, data: Dict[str, Any]) -> float:
        """
        Calcula la confianza del an√°lisis SEO y visual
        """
        confidence = 0.0
        
        # Verificar estrategia SEO
        seo = data.get("seo_strategy", {})
        if seo.get("primary_keywords") and len(seo.get("primary_keywords", [])) >= 3:
            confidence += 0.2
        if seo.get("secondary_keywords") and len(seo.get("secondary_keywords", [])) >= 5:
            confidence += 0.15
        if seo.get("long_tail_keywords") and len(seo.get("long_tail_keywords", [])) >= 3:
            confidence += 0.1
        
        # Verificar optimizaci√≥n de t√©rminos de b√∫squeda
        search_terms = data.get("search_terms_optimization", {})
        if search_terms.get("frontend_terms") and len(search_terms.get("frontend_terms", [])) >= 5:
            confidence += 0.15
        if search_terms.get("backend_terms") and len(search_terms.get("backend_terms", [])) >= 10:
            confidence += 0.1
        
        # Verificar estrategia de im√°genes
        image_strategy = data.get("image_strategy", {})
        if image_strategy.get("main_image_recommendations"):
            confidence += 0.1
        if image_strategy.get("secondary_images_plan") and len(image_strategy.get("secondary_images_plan", [])) >= 3:
            confidence += 0.1
        
        # Verificar contenido A+
        aplus = data.get("a_plus_content_strategy", {})
        if aplus.get("content_modules") and len(aplus.get("content_modules", [])) >= 2:
            confidence += 0.05
        
        # Verificar timeline de optimizaci√≥n
        timeline = data.get("optimization_timeline", {})
        if timeline.get("immediate_actions") and len(timeline.get("immediate_actions", [])) >= 2:
            confidence += 0.05
        
        return min(confidence, 1.0)
